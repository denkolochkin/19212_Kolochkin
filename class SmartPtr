template <class T>
class SmartPtr {
public:
    SmartPtr() : raw_pointer_(nullptr){};

    ~SmartPtr() {
        delete raw_pointer_;
    };

    SmartPtr(T* ptr) {
        raw_pointer_ = ptr;
    };

    SmartPtr(const SmartPtr&) = delete;

    SmartPtr(SmartPtr&& a) {
        raw_pointer_ = a.release();
    };

    SmartPtr& operator=(const SmartPtr&) = delete;

    SmartPtr& operator=(nullptr_t) {
        reset(nullptr);
        return *this;
    };

    SmartPtr& operator=(SmartPtr&& a) {
        raw_pointer_ = a.release();
        return *this;
    };

    T& operator*() const {
        return *get();
    };

    T* operator->() const {
        return get();
    };

    T* release() {
        auto a = raw_pointer_;
        raw_pointer_ = nullptr;
        return a;
    };

    void reset(T* ptr) {
        delete raw_pointer_;
        raw_pointer_ = ptr;
    };

    void swap(SmartPtr& other) {
        std::swap(raw_pointer_, other.raw_pointer_);
    };

    T* get() const {
        return raw_pointer_;
    };

private:
    T* raw_pointer_;
};
